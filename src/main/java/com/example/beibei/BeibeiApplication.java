package com.example.beibei;

import lombok.extern.log4j.Log4j2;
import org.apache.commons.io.FileUtils;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;

@SpringBootApplication
@RestController
@Log4j2
public class BeibeiApplication {

    private final int[] arr = new int[]{9899, 8268, 8270, 7111, 6789, 4876, 446, 2213, 3876, 3136, 4739, 2230, 5087, 8612, 10, 6294, 2952, 4325, 4122, 5237, 7606, 3963, 5480, 5135, 6948, 5098, 8229, 3181, 8182, 9867, 1007, 8970, 2273, 1000, 3216, 7330, 407, 7324, 5600, 7205, 7373, 3552, 8713, 2915, 7751, 5133, 8273, 1052, 6263, 7835, 2295, 2992, 7391, 9154, 2384, 2136, 6482, 7969, 4511, 8092, 1040, 709, 9873, 1219, 3078, 2207, 2318, 8511, 7539, 8386, 4470, 5672, 4049, 3238, 13, 674, 7813, 6187, 793, 8383, 3771, 5544, 265, 6749, 758, 2541, 8833, 8855, 9562, 189, 7899, 5499, 4531, 7712, 949, 1952, 7194, 1550, 6138, 10, 2636, 1123, 9215, 3485, 5793, 8367, 80, 925, 5973, 139, 5450, 2210, 8466, 581, 2854, 1000, 2298, 9806, 7760, 658, 9218, 9836, 9494, 9088, 5947, 700, 3824, 3188, 9097, 4657, 1945, 6276, 6222, 2164, 3644, 3544, 4021, 8958, 681, 7027, 9657, 507, 1171, 5493, 6622, 7430, 4653, 5921, 240, 2541, 9683, 3896, 9313, 346, 1389, 7000, 5841, 5695, 9267, 3228, 3637, 9682, 4198, 5154, 8628, 2394, 4641, 4376, 9125, 9646, 4524, 2772, 1058, 6845, 9216, 8581, 9127, 1289, 4337, 1939, 1712, 3324, 7782, 9523, 7234, 1193, 7223, 12, 4501, 4102, 1354, 4247, 7005, 7799, 6571, 2816, 8016, 3210, 3126, 5069, 8194, 6990, 4396, 1433, 8029, 1580, 8964, 4903, 5479, 9679, 8780, 5522, 1591, 4098, 4936, 4028, 7927, 3883, 3849, 6705, 9072, 6110, 4436, 8673, 6119, 3219, 474, 9843, 5011, 9591, 8469, 6827, 4510, 472, 9576, 5394, 9730, 9966, 3628, 4286, 1859, 7644, 1451, 2321, 4716, 1774, 5180, 5781, 5338, 7833, 5817, 1657, 18, 4480, 9931, 3044, 8196, 2466, 8774, 5017, 558, 6075, 4530, 5112, 1642, 4187, 269, 3916, 4617, 5489, 4644, 454, 5598, 3623, 6422, 3115, 1691, 2930, 9782, 9728, 4117, 7880, 8885, 112, 9786, 7812, 3770, 5406, 2918, 3117, 8170, 5507, 7795, 2713, 8082, 3146, 9824, 5928, 7162, 1473, 12, 6241, 6578, 9826, 1570, 7882, 5587, 5015, 1216, 8348, 1399, 6478, 3987, 6927, 5341, 8844, 3995, 7874, 3147, 7025, 1688, 1284, 4115, 1608, 7650, 7099, 1005, 4927, 6930, 5925, 7989, 7401, 863, 4140, 6446, 2407, 4980, 8979, 6756, 7060, 7582, 8238, 6029, 3406, 195, 8643, 1437, 7171, 7987, 5389, 210, 7126, 488, 720, 4889, 1038, 545, 4802, 4296, 5936, 4894, 1905, 9217, 1873, 1659, 3038, 6723, 804, 5065, 4870, 2341, 7331, 469, 6775, 8294, 5403, 294, 3720, 5639, 2571, 71, 9819, 5615, 874, 8246, 5854, 7210, 6204, 1317, 7437, 5344, 1771, 7057, 657, 495, 5333, 9119, 8029, 1183, 4511, 4615, 2610, 7858, 6110, 5714, 4667, 7683, 3979, 7524, 8835, 1075, 1201, 7547, 6104, 9527, 5129, 1466, 5438, 5181, 9443, 4995, 7570, 1770, 2894, 9895, 3811, 6890, 24, 6455, 3708, 2342, 9152, 8331, 5303, 1537, 6306, 3648, 36, 6535, 6005, 6849, 188, 7201, 7770, 3091, 7467, 2488, 7446, 3287, 6449, 1837, 727, 3141, 1262, 4282, 6794, 3569, 5392, 7558, 1806, 9990, 7295, 3821, 9405, 9651, 5554, 9032, 8862, 6813, 6751, 5324, 4478, 5500, 7143, 3592, 7651, 7581, 9359, 5305, 2849, 1461, 2786, 7703, 680, 2104, 1105, 7185, 7283, 529, 7244, 8525, 6729, 1023, 1729, 2723, 8470, 6350, 4580, 5539, 5992, 6831, 8989, 184, 3674, 3519, 6209, 3457, 6254, 7537, 6885, 7239, 5418, 1787, 8968, 3552, 816, 2364, 1159, 7897, 5443, 4533, 9970, 2408, 6814, 9536, 3692, 2756, 2801, 3091, 4667, 7746, 9902, 4334, 7992, 899, 9496, 9885, 4624, 344, 648, 4755, 1769, 2693, 1340, 4686, 4948, 1726, 669, 4532, 7612, 955, 4032, 7208, 101, 3329, 8506, 1577, 1027, 8894, 3384, 4843, 5199, 2166, 1443, 2266, 3464, 9049, 6287, 5986, 5844, 341, 6852, 5298, 8066, 8799, 9426, 8820, 5935, 8508, 6875, 4344, 3954, 9446, 6142, 2366, 4918, 9273, 2425, 5820, 3506, 9676, 2272, 4588, 7278, 4848, 1633, 6446, 7687, 2377, 5170, 7325, 1994, 5369, 969, 5446, 8994, 5757, 4100, 9953, 7515, 8238, 8093, 3744, 8758, 2519, 8901, 7858, 7193, 8055, 5276, 4364, 8818, 4718, 4091, 877, 7176, 3273, 8887, 8984, 6924, 7225, 7278, 7828, 4039, 1472, 4393, 6976, 4597, 4884, 1676, 6839, 6335, 3700, 3446, 1534, 2160, 1890, 408, 1020, 1246, 1299, 3569, 6901, 9248, 2457, 6469, 5441, 1536, 2801, 9116, 5792, 7625, 3518, 3753, 2895, 6259, 9202, 9702, 3596, 9519, 9943, 2270, 5522, 9764, 9345, 7877, 3785, 8113, 1266, 7467, 4234, 6316, 3549, 4240, 699, 6731, 1, 1263, 147, 2488, 551, 7340, 8534, 3096, 8325, 8559, 7196, 8448, 90, 6962, 8862, 4206, 3587, 1287, 5416, 54, 4976, 6288, 7477, 5334, 2689, 1822, 4095, 5945, 3633, 8673, 5018, 1777, 2655, 6789, 6091, 7107, 4345, 3202, 3839, 6546, 8805, 3305, 658, 2977, 5199, 9109, 8912, 7788, 5981, 4994, 5879, 106, 1743, 1930, 8661, 6119, 6288, 6668, 1259, 2078, 9063, 2031, 7121, 2850, 8704, 9791, 6787, 3112, 4904, 4314, 2710, 6686, 6390, 8052, 3921, 2691, 8189, 7769, 6114, 1816, 3827, 6693, 7735, 9016, 4925, 971, 6997, 9155, 2206, 8515, 3318, 4663, 5294, 4407, 5365, 9111, 1285, 7382, 327, 6819, 6778, 2999, 4593, 789, 4011, 6225, 6748, 1583, 7302, 8649, 2345, 1931, 1040, 154, 542, 2393, 3227, 5005, 6916, 161, 1259, 9315, 6792, 4333, 7502, 4127, 2805, 8878, 1773, 4490, 3542, 9427, 7783, 8215, 5327, 9212, 5082, 6568, 5905, 540, 9755, 3193, 7868, 9874, 1409, 7873, 5876, 842, 9586, 8652, 4651, 5992, 7706, 8690, 2702, 4313, 1975, 3943, 4227, 1435, 9761, 9192, 7242, 2395, 3499, 2447, 6580, 4799, 9259, 1314, 4398, 31, 5580, 5055, 1416, 1363, 5008, 2868, 8470, 3756, 4317, 3578, 8720, 3995, 6566, 3778, 3858, 153, 5780, 3049, 5252, 2985, 883, 5133, 7106, 7465, 8695, 111, 7585, 5258, 3053, 4543, 5445, 1051, 8600, 186, 6452, 9538, 1839, 4279, 8602, 7092, 7629, 4384, 3625, 9510, 3054, 3397, 8896, 9711, 3448, 7239, 6975, 3864, 3301, 7590, 9396, 8969, 5402, 9345, 2607, 5731, 3039, 9932, 970, 4581, 1615, 7565, 151, 3218, 1374, 179, 6583, 1699, 7128, 5152, 9151, 1273, 228, 359, 9616, 7286, 6113, 3313, 583, 7242, 2059, 2442, 2256, 8098, 8406, 3743, 128, 2768, 5509, 2874, 4321, 4048, 7638, 8783, 7537, 3373, 7178, 2611, 9011, 2974, 6279, 3687, 8650, 6548, 8256, 2833, 8222, 5902, 5578, 601, 9079, 3824, 8415, 5627, 5567, 5289, 3220, 5874, 7274, 4747, 4480, 7278, 6940, 8392, 6418, 5119, 3616, 5989, 2195, 6669, 2365, 61, 444, 6345, 2912, 9425, 817, 5444};

    public static void main(String[] args) {
        SpringApplication.run(BeibeiApplication.class, args);
    }

    @GetMapping("test1")
    public String test1() {
        for (int i = 0; i < 10; i++) {
            log.error("这是错误" + i);
        }
        return "fds";
    }

    @GetMapping("test")
    public String test() {
        for (int i = 0; i < 20; i++) {
            int a = i / 4;
            switch (a) {
                case 0:
                    log.info(i + "");
                    break;
                case 1:
                    log.debug(i + "");
                    break;
                case 2:
                    log.warn(i + "");
                    break;
                case 3:
                    log.error(i + "");
                    break;
                default:
                    log.trace("trace");
            }
        }


        return "hello word";
    }


    @GetMapping("bubbleSort")
    public void bubbleSort() {
        bubbleSort(arr);
    }

    @GetMapping("readFile")
    public void readFile() {
        try {
            String s = FileUtils.readFileToString(new File("/Users/alvin/Downloads/P8M18QTMIS.txt"), Charset.defaultCharset());
            FileUtils.write(new File("/Users/alvin/Downloads/read/" + System.currentTimeMillis() + ".txt"), s, Charset.defaultCharset());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private static void bubbleSort(int[] aa) {
        int[] arr = aa;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {   // 这里说明为什么需要-1
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }


}
